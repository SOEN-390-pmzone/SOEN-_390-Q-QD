import React from "react";
import { View, Text, TouchableOpacity } from "react-native";
import { WebView } from "react-native-webview"; // WebView allows embedding web content in the React Native app
import PropTypes from "prop-types";
import MapGenerationService from "../../services/MapGenerationService";

/**
 * Renders an expanded map modal for displaying map directions
 * @param {Object} props - Component props
 * @param {boolean} props.visible - Whether the modal is visible
 * @param {function} props.onClose - Function to call when closing the modal
 * @param {Array} props.route - Route coordinates to display
 * @param {string} props.apiKey - Google Maps API key
 * @param {Object} props.styles - Styles object for component styling
 * @returns {JSX.Element|null} The expanded map component or null when not visible
 */
const ExpandedMapModal = ({ visible, onClose, route, apiKey, styles }) => {
  // Early return pattern for conditional rendering
  // If the modal is not visible, don't render anything
  if (!visible) return null;

  return (
    <View style={styles.expandedModalOverlay} testID="modal-overlay">
      {/* Modal container with semi-transparent background */}
      <View style={styles.expandedModalContent} testID="modal-content">
        {/* Header section with title and close button */}
        <View style={styles.expandedHeader}>
          <Text style={styles.expandedTitle}>Map Directions</Text>
          <TouchableOpacity
            style={styles.closeExpandedButton}
            onPress={onClose}
            // Close button to dismiss the modal
          >
            <Text style={styles.closeExpandedText}>Ã—</Text>
          </TouchableOpacity>
        </View>
        {/* WebView renders HTML content containing the Google Map */}
        {/* The map is generated by MapGenerationService based on the provided route */}
        <WebView
          originWhitelist={["*"]} // Allow loading from any origin, which might be necessary for maps to work properly
          source={{
            html: MapGenerationService.generateMapHtml(route, apiKey), // Uses service to generate HTML with embedded Google Map
          }}
          style={styles.expandedWebView}
        />
      </View>
    </View>
  );
};

// PropTypes for type checking and documentation
// Important for maintaining component interfaces and preventing runtime errors
ExpandedMapModal.propTypes = {
  visible: PropTypes.bool.isRequired, // Controls modal visibility
  onClose: PropTypes.func.isRequired, // Callback function to close the modal
  route: PropTypes.array.isRequired, // Array of coordinates that define the route path
  apiKey: PropTypes.string.isRequired, // Google Maps API key needed for map rendering
  styles: PropTypes.shape({
    // Component styling object with specific fields
    expandedModalOverlay: PropTypes.object, // Full screen overlay style
    expandedModalContent: PropTypes.object, // Modal container style
    expandedHeader: PropTypes.object, // Header section style
    expandedTitle: PropTypes.object, // Title text style
    closeExpandedButton: PropTypes.object, // Close button style
    closeExpandedText: PropTypes.object, // Close button text style
    expandedWebView: PropTypes.object, // WebView container style
  }).isRequired,
};

export default ExpandedMapModal;
